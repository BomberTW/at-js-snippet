".source.js, .source.ts":

  "Node callback":
    prefix: "cb"
    body: "function (err, ${1:value}) {${0}}"
  "Promise.then":
    prefix: "then"
    body: """
    ${1:promise}.then(function (${2:value}) {
    \t${0}
    })
    """
  "Chain thenable":
    prefix: ".then"
    body: ".then(function (${1:value}) {${0}})"
  "Promise.catch":
    prefix: "catch"
    body: """
    ${1:promise}.catch(function (${2:err}) {
    \t${0}
    })
    """
  "Chain thenable catch":
    prefix: ".catch"
    body: ".catch(function (${1:err}) {${0}})"

  "describe":
    prefix: "desc"
    body: """
    describe('${1:description}', function () {
    \t${0}
    })
    """
  "it asynchronous":
    prefix: "ita"
    body: """
    it('${1:description}', function (done) {
    \t${0}
    })
    """
  "it synchronous":
    prefix: "its"
    body: """
    it('${1:description}', function () {
    \t${0}
    })
    """

  "console.log":
    prefix: "cl"
    body: "console.log(${0})"
  "console.error":
    prefix: "ce"
    body: "console.error(${0})"
  "console.dir":
    prefix: "cd"
    body: "console.dir(${0})"

  "if statement":
    prefix: "if"
    body: """
    if (${1:condition}) {
    \t${0}
    }
    """
  "else statement":
    prefix: "else"
    body: """
    else {
    \t${0}
    }
    """
  "if/else statement":
    prefix: "ife"
    body: """
    if (${1:condition}) {
    \t${0}
    } else {
    \t
    }
    """
  "else if statement":
    prefix: "ei"
    body: """
    else if (${1:condition}) {
    \t${0}
    }
    """
  "for loop":
    prefix: "fo"
    body: """
    for (var ${1:i} = ${2:0} ; ${1:i} < ${3:0}; ${1:i}${4:++}) {
    \t${0}
    }
    """
  "for in loop":
    prefix: "forin"
    body: """
    for (var ${1:key} in ${2:source}) {
    \tif (${2:source}.hasOwnProperty(${1:key})) {
    \t\t${0}
    \t}
    }
    """
  "while loop":
    prefix: "wl"
    body: """
    while (${1:condition}) {
    \t${0}
    }
    """

  "anonymous function":
    prefix: "af"
    body: """
    function(${1}) {
    \t${0}
    }
    """
  "named function":
    prefix: "nf"
    body: """
    function ${1:name}(${2}) {
    \t${0}
    }
    """
  "immediately-invoked function expression":
    prefix: "iife"
    body: """
    (function (${1:arguments}) {
    \t${0}
    })(${2})
    """
  "function apply":
    prefix: "fa"
    body: """
    ${1:fn}.apply(${2:this}, ${3:arguments})
    """
  "function call":
    prefix: "fc"
    body: """
    ${1:fn}.call(${2:this}, ${3:arguments})
    """
  "function bind":
    prefix: "fb"
    body: """
    ${1:fn}.bind(${2:this}, ${3:arguments})
    """

  "forEach loop":
    prefix: "foreach"
    body: """
    ${1:iterable}.forEach(function (${2:item}) {
    \t${0}
    })
    """
  "Chain forEach":
    prefix: ".foreach"
    body: ".forEach(function (${1:item}) {${0}})"
  "map":
    prefix: "map"
    body: """
    ${1:iterable}.map(function (${2:item}) {
    \t${0}
    })
    """
  "Chain map":
    prefix: ".map"
    body: ".map(function (${1:item}) {${0}})"
  "reduce":
    prefix: "reduce"
    body: """
    ${1:iterable}.reduce(function (${2:previous}, ${3:current}) {
    \t${0}
    }${4:, initial})
    """
  "Chain reduce":
    prefix: ".reduce"
    body: ".reduce(function (${1:previous}, ${2:current}) {${0}}${4:, initial})"
  "filter":
    prefix: "filter"
    body: """
    ${1:iterable}.filter(function (${2:item}) {
    \t${0}
    })
    """
  "Chain filter":
    prefix: ".filter"
    body: ".filter(function (${1:item}) {${0}})"


  "use strict":
    "prefix": "us"
    "body": """
    'use strict';
    """

  "prompt":
    "prefix": "pm"
    "body": """
    prompt('${1:msg}')
    """

  "alert":
    "prefix": "al"
    "body": """
    alert('${1:msg}')
    """

  "key/value":
    prefix: ":"
    body: "${1:key}: ${2:'value'}"
  "prototype method":
    prefix: "proto"
    body: """
    ${1:Class}.prototype.${2:methodName} = function (${3:arguments}) {
    \t${0}
    }
    """
  "Chain prototype method":
    prefix: ".proto"
    body: """
    .prototype.${2:methodName} = function (${3:arguments}) {
    \t${0}
    }
    """

  "return":
    prefix: "r"
    body: "return ${0};"
  "return this":
    prefix: "rth"
    body: "return this;"
  "return null":
    prefix: "rn"
    body: "return null;"
  "return true":
    prefix: "rt"
    body: "return true;"
  "return false":
    prefix: "rf"
    body: "return false;"
  "return 0":
    prefix: "r0"
    body: "return 0;"

  "setTimeout":
    prefix: "setTimeout"
    body: """
    setTimeout(function () {
    \t${0}
    }, ${1:delay})
    """
  "setInterval":
    prefix: "setInterval"
    body: """
    setInterval(function () {
    \t${0}
    }, ${1:delay})
    """

  "String":
    prefix: "st"
    body: "String"
  "Number":
    prefix: "nu"
    body: "Number"
  "Object":
    prefix: "ob"
    body: "Object"
  "RegExp":
    prefix: "ar"
    body: "Array"
  "Date":
    prefix: "da"
    body: "Date"
  "RegExp":
    prefix: "rx"
    body: "RegExp"
  "typeof obj === 'type'":
    prefix: "tof"
    body: "typeof ${1:source} === '${2:undefined}'"
  "obj instanceof Constructor":
    prefix: "iof"
    body: "${1:source} instanceof ${2:Object}"
